function out_str = VAPP_strip_comments(input_str)

    out_str = '';
    STG = get_comments_STG();
    curr_state = 'START';

    for idx = 1:1:length(input_str)

        ch = input_str(idx);
        [next_state, out_chars] = transition(STG, curr_state, ch);

        if length(out_chars) > 0
            out_str = [out_str, out_chars];
        end

        curr_state = next_state;

    end

    % TODO: It might be a good idea to have a check here, to make sure you 
    % don't end in the middle of a string or in the middle of a comment or
    % something.

end

function out = get_comments_STG()

    out = { ... 
              { 'START', ...
                  { ...
                      {   '"',       'IN_A_STRING', {'ECHO'} }, ...
                      {   '/', 'SEEN_/_FROM_START', {    ''} }, ...
                      {   '(', 'SEEN_(_FROM_START', {    ''} }, ...
                      { 'ANY',             'START', {'ECHO'} },  ...
                  } ...
              }, ...
              { 'IN_A_STRING', ...
                  { ...
                      {   '\', 'STRING_ESCAPE', {'ECHO'} }, ...
                      {   '"',         'START', {'ECHO'} }, ...
                      { 'ANY',   'IN_A_STRING', {'ECHO'} },  ...
                  } ...
              }, ...
              { 'STRING_ESCAPE', ...
                  { ...
                      { 'ANY',   'IN_A_STRING', {'ECHO'} }, ...
                  } ...
              }, ...
              { 'SEEN_(_FROM_START', ...
                  { ...
                      {   '*',     'IN_(*_COMMENT',            {'PRINT', '  '} }, ...
                      {   '(', 'SEEN_(_FROM_START',  {'PRINT', '('} }, ...
                      {   '/', 'SEEN_/_FROM_START',  {'PRINT', '('} }, ...
                      {   '"',       'IN_A_STRING', {'PREFIX', '('} }, ...
                      { 'ANY',             'START', {'PREFIX', '('} }, ...
                  } ...
              }, ...
              { 'SEEN_/_FROM_START', ...
                  { ...
                      {   '(', 'SEEN_(_FROM_START',  {'PRINT', '/'} }, ...
                      {   '/',     'IN_//_COMMENT',            {'PRINT', '  '} }, ...
                      {   '*',     'IN_/*_COMMENT',            {'PRINT', '  '} }, ...
                      {   '"',       'IN_A_STRING', {'PREFIX', '/'} }, ...
                      { 'ANY',             'START', {'PREFIX', '/'} }, ...
                  } ...
              }, ...
              { 'IN_(*_COMMENT', ...
                  { ...
                      {   '*', 'SEEN_*_IN_(*_COMMENT', {'PRINT', ' '} }, ...
                      { 'ANY',        'IN_(*_COMMENT', {'PRINT', ' '} }, ...
                  } ...
              }, ...
              { 'IN_//_COMMENT', ...
                  { ...
                      { sprintf('\n'),         'START', {'ECHO'} }, ...
                      { sprintf('\r'),         'START', {'ECHO'} }, ...
                      {         'ANY', 'IN_//_COMMENT',            {'PRINT', ' '} }, ...
                  } ...
              }, ...
              { 'IN_/*_COMMENT', ...
                  { ...
                      {   '*', 'SEEN_*_IN_/*_COMMENT', {'PRINT', ' '} }, ...
                      { 'ANY',        'IN_/*_COMMENT', {'PRINT', ' '} }, ...
                  } ...
              }, ...
              { 'SEEN_*_IN_/*_COMMENT', ...
                  { ...
                      {   '/',                'START', {'PRINT', ' '} }, ...
                      {   '*', 'SEEN_*_IN_/*_COMMENT',           {'PRINT', ' '} }, ...
                      { 'ANY',        'IN_/*_COMMENT',           {'PRINT', ' '} }, ...
                  } ...
              }, ...
              { 'SEEN_*_IN_(*_COMMENT', ...
                  { ...
                      {   ')',                'START', {'PRINT', ' '} }, ...
                      {   '*', 'SEEN_*_IN_(*_COMMENT',           {'PRINT', ' '} }, ...
                      { 'ANY',        'IN_(*_COMMENT',           {'PRINT', ' '} }, ...
                  } ...
              } ...
          };

end

function [next_state_name, out_chars] = ...
            transition(STG, curr_state_name, in_char)
    
    % find the state corresponding to curr_state_name
    num_states = length(STG);
    for idx = 1:1:num_states
        st = STG{idx};
        st_name = st{1};
        if strcmp(st_name, curr_state_name)
            curr_state = st;
            break;
        end
    end

    % find the edge corresponding to in_char
    out_edges = curr_state{2};
    for idx = 1:1:length(out_edges)
        e = out_edges{idx};
        in_symbol = e{1};
        if strcmp(in_symbol, 'ANY') || in_symbol == in_char
            curr_edge = e;
            break;
        end
    end

    % figure out the name of the next state, and the output characters
    next_state_name = e{2};
    action = e{3};
    action_type = action{1};
    if strcmp(action_type, '')
        out_chars = '';
    elseif strcmp(action_type, 'ECHO')
        out_chars = in_char;
    elseif strcmp(action_type, 'PREFIX')
        prefix = action{2};
        out_chars = [prefix, in_char];
    elseif strcmp(action_type, 'PRINT')
        out_chars = action{2};
    end

end

